{"ast":null,"code":"var _jsxFileName = \"/home/luisvera/code/labs/phase/Phase_5/cheese-and-crackers/cheese-and-crackers/src/components/GameRenderer.js\";\nimport React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameRenderer = ({\n  board\n}) => {\n  let renderedBoard = [];\n  let square = Math.sqrt(board.length);\n  let counter = 0;\n\n  for (let i = 0; i < board.length; i++) {\n    counter++;\n\n    for (let i = 0; i < board.length; i++) {\n      if (counter <= square) {\n        renderedBoard.push( /*#__PURE__*/_jsxDEV(Col, {\n          children: board[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 40\n        }, this));\n      } else {\n        renderedBoard.push( /*#__PURE__*/_jsxDEV(Row, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 40\n        }, this));\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: renderedBoard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 13\n  }, this);\n};\n\n_c = GameRenderer;\nexport default GameRenderer;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameRenderer\");","map":{"version":3,"sources":["/home/luisvera/code/labs/phase/Phase_5/cheese-and-crackers/cheese-and-crackers/src/components/GameRenderer.js"],"names":["React","Container","Row","Col","GameRenderer","board","renderedBoard","square","Math","sqrt","length","counter","i","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,GAAT,QAAoB,iBAApB;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAE1B,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,MAAM,GAAGC,IAAI,CAACC,IAAL,CAAUJ,KAAK,CAACK,MAAhB,CAAb;AACA,MAAIC,OAAO,GAAG,CAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACK,MAA1B,EAAkCE,CAAC,EAAnC,EAAsC;AAClCD,IAAAA,OAAO;;AAEP,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACK,MAA1B,EAAkCE,CAAC,EAAnC,EAAsC;AAClC,UAAID,OAAO,IAAIJ,MAAf,EAAsB;AAClBD,QAAAA,aAAa,CAACO,IAAd,eAAmB,QAAC,GAAD;AAAA,oBAAMR,KAAK,CAACO,CAAD;AAAX;AAAA;AAAA;AAAA;AAAA,gBAAnB;AACH,OAFD,MAGI;AACAN,QAAAA,aAAa,CAACO,IAAd,eAAmB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,gBAAnB;AACH;AACJ;AACJ;;AACD,sBACI,QAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAA,cAAkBP;AAAlB;AAAA;AAAA;AAAA;AAAA,UADJ;AAGP,CArBD;;KAAMF,Y;AAuBN,eAAeA,YAAf","sourcesContent":["import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport { Row } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\n\nconst GameRenderer = ({board}) => {\n\n        let renderedBoard = []\n        let square = Math.sqrt(board.length)\n        let counter = 0\n\n        for (let i = 0; i < board.length; i++){\n            counter++\n\n            for (let i = 0; i < board.length; i++){\n                if (counter <= square){\n                    renderedBoard.push(<Col>{board[i]}</Col>)\n                }\n                else{\n                    renderedBoard.push(<Row></Row>)\n                }\n            }\n        }\n        return(\n            <Container fluid>{renderedBoard}</Container>\n        )\n}\n\nexport default GameRenderer"]},"metadata":{},"sourceType":"module"}